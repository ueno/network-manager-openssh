NetworkManager-sshtun -- Tunnel over SSH (sshtun) VPN plugin for NetworkManager

OpenSSH has a feature to tunnel IP or Ethernet over the SSH protocol.
This plugin allows you to use that feature from NetworkManager.

* Build

 $ sudo apt-get install libssh2-1-dev libnm-glib-vpn-dev
 $ ./autogen.sh --prefix=/usr --sysconfdir=/etc
 $ make
 $ sudo make install

* Setup

 # Build tunctl program with "pointopoint" support.
 remote$ apt-get source uml-utilities
 remote$ cd uml-utilities-20070815
 remote$ patch -p1 < tunctl-pointopoint.patch
 remote$ cd tunctl && make

 # Create a tun device and initialize it.
 remote$ sudo modprobe tun
 remote$ sudo ./tunctl -u $USER -m pointopoint
 remote$ sudo ip addr add 10.0.1.3 peer 10.0.1.1 dev tun0
 remote$ sudo ip link set tun0 up

 # Enable "PermitTunnel" in /etc/ssh/sshd_config and restart sshd.
 remote$ sudo sh -c 'echo PermitTunnel yes >> /etc/sshd/sshd_config'
 remote$ sudo /etc/init.d/ssh restart

 # Create a client IP config script
 remote$ cat > sshtun_config
 #!/bin/sh

 cat <<EOF
 ADDR 10.0.1.1
 PEER_ADDR 10.0.1.3
 NETMASK 255.255.255.0
 GW_ADDR <remote-ip>
 EOF
 ^D
 remote$ chmod +x sshtun_config

 # Create a keypair with an empty passphrase.
 local$ ssh-keygen -t rsa -N '' -f ~/.ssh/tun
 local$ { echo -n 'tunnel=0 '; cat ~/.ssh/tun.pub } | \
        ssh remote 'cat >> ~/.ssh/authorized_keys'

Now you can create a VPN connection from NetworkManager applet.

* How does it work

The core of NetworkManager-sshtun is a small library sshtun.c.  It
internally spawns a setuid'ed process which does the actual job of
relaying IP/Ethernet packets over SSH.

The child process first opens "tun@openssh.com" channel (see
openssh/PROTOCOL), and then opens another channel to get an IP
configuration.

The library API can be used as follows.  All functions are async
(i.e. should return in a short time).

 /* Allocate memory for a handle */
 sshtun_new (&handle);

 /* Set parameters of the handle */
 sshtun_set_params (handle,
                    SSHTUN_PARAM_TUN_MODE, tun_mode, ...
                    SSHTUN_PARAM_TUN_OWNER, tun_owner, ...
                    0);

 /* Start a tunneling task */
 sshtun_start (handle);

 /* Dispatch events from the child process */
 pfds[0].fd = sshtun_event_fd (handle);
 while (1) {
   pfds[0].events = POLLIN;
   ret = poll (pfds, 1, -1);
   if (ret > 0 && pfds[0].revents & POLLIN)
     sshtun_dispatch_event (handle);
 }

 /* Stop the tunneling task */
 sshtun_stop (handle);

 /* Deallocate memory for the handle */
 sshtun_del (handle);

* References

- Davide Brini's precise tutorial on the TUN/TAP interface:
  http://waldner.netsons.org/d2-tuntap.php

* Disclaimer

This plugin is alpha quality; please use at your own risk.

OpenSSH TUN/TAP tunneling involves the problems regarding TCP over
TCP: http://sites.inka.de/bigred/devel/tcp-tcp.html.  For a serious
use, consider using OpenVPN (or other VPN software).

The development started just to demonstrate the PermitRootLogin
setting (on the remote host) and the root privileges (on the local
host) are not really necessary for the OpenSSH TUN/TAP functionality
working, though most online resources assume them.
